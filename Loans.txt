from asyncio.windows_events import NULL
from re import L
from flask import Flask ,render_template, request
import sqlite3
import datetime
from Tools.Declaration import Types, columLoans

con = sqlite3.connect('Library.db', check_same_thread=False)
cur = con.cursor()


class loans:
    def __init__(self):
        pass


    def loanBook(self):
        msg = ''
        if request.method == 'POST':
            custId = request.form.get('custId')
            bookName = request.form.get('bookName')
            bookAuthor = request.form.get('bookAuthor')
            # check if cust exist
            cur.execute('SELECT Id FROM Customers WHERE Id = ? ', [custId])
            try:
                cur.fetchone()[0]
            except:
                msg = "Customer dose not exists :("
                return render_template("/Loans/loanBook.html", msg=msg)
            # find book id by name and check if exist
            cur.execute('SELECT Id FROM Books WHERE Name = ? AND Author = ?', (bookName, bookAuthor))
            try:
                bookId = cur.fetchone()[0]
            except:
                msg = "Book dose not exists :("
                return render_template("/Loans/loanBook.html", msg=msg) 
            # check if the book is on loan, else loan the book
            cur.execute('SELECT BookID FROM Loans WHERE BookID = ? AND Returndate = ?', (bookId, NULL))
            Loans = cur.fetchall()
            print(len(Loans))
            if len(Loans) == 0:
                today = datetime.datetime.now()
                #fulltoday = today.strftime("%d-%m-%Y")
                fulltoday = '22-03-2022'
                print (fulltoday)
                cur.execute('INSERT INTO Loans VALUES ( ?, ?, ?, ?)',(custId, bookId, fulltoday, NULL))
                con.commit()
            else:
                msg = "The book is on loan, please select anothr book"
                return render_template("/Loans/loanBook.html", msg=msg)
        return render_template("/Loans/loanBook.html")


    def returnBook(self):
        if request.method == 'POST':
            custId = request.form.get('custId')
            bookName = request.form.get('bookName')
            bookAuthor = request.form.get('bookAuthor')
            cur.execute('SELECT Id FROM Books WHERE Name = ? AND Author = ?', (bookName, bookAuthor))
            bookId = cur.fetchone()[0]
            today = datetime.datetime.now()
            fulltoday = today.strftime("%d-%m-%Y")
            cur.execute('UPDATE Loans SET Returndate = ? WHERE CustID = ? AND BookID = ?',(fulltoday, custId, bookId))
            con.commit()
        return render_template("/Loans/returnBook.html")


    def displayLoans(self):
        SQL = '''SELECT Customers.Id, Customers.Name, Books.Id, Books.Name, Loandate, Returndate
             FROM Loans
             INNER JOIN Customers ON Loans.CustID = Customers.Id
             INNER JOIN Books ON Loans.BookID = Books.Id
             ORDER BY 1'''
        cur.execute(SQL)
        Loans = cur.fetchall()
        return render_template("/Loans/displayLoans.html", Loans = Loans)


    def displayLate(self):
        SQL = '''SELECT Customers.Name, Books.Name, Books.Type, Loandate, Returndate
             FROM Loans
             INNER JOIN Customers ON Loans.CustID = Customers.Id
             INNER JOIN Books ON Loans.BookID = Books.Id
             WHERE Returndate = 0
             ORDER BY 1'''
        cur.execute(SQL)
        Loans = cur.fetchall()
        lateLoans = []
        for i in Loans:
            now = datetime.datetime.now()
            then = datetime.datetime.strptime(i[3], '%d-%m-%Y')
            diff = now - then
            if i[columLoans.LOANDATE.value] == Types.TENDAYS.value:
                if diff.days > 10:
                    lateLoans.append(i)
            elif i[columLoans.LOANDATE.value] == Types.TENDAYS.value:
                if diff.days > 5:
                    lateLoans.append(i)
            elif i[columLoans.LOANDATE.value] == Types.TWODAYS.value:
                if diff.days > 2:
                    lateLoans.append(i)
        return render_template("/Loans/displayLate.html", lateLoans = lateLoans)